// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApp.Data;

#nullable disable

namespace MusicApp.Migrations
{
    [DbContext(typeof(MusicAppDbContext))]
    partial class MusicAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AlbumUser", b =>
                {
                    b.Property<string>("AlbumsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAlbums", (string)null);
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrlsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDatePrecision")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUrlsId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Artist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrlsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ExternalUrlsId");

                    b.HasIndex("TrackId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("SpotifyMVC.Models.ExternalUrls", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Spotify")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExternalUrls");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrlsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Public")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TracksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUrlsId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TracksId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("SpotifyMVC.Models.PlaylistOwner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrlsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUrlsId");

                    b.ToTable("PlaylistOwner");
                });

            modelBuilder.Entity("SpotifyMVC.Models.PlaylistTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaylistTracksId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistTracksId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("SpotifyMVC.Models.PlaylistTracks", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlaylistTracks");
                });

            modelBuilder.Entity("SpotifyMVC.Models.SpotifyImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaylistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("SpotifyImage");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalUrlsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPlayable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviewUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ExternalUrlsId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AdFree")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HighQualityAudio")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OfflineAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AlbumUser", b =>
                {
                    b.HasOne("SpotifyMVC.Models.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpotifyMVC.Models.Album", b =>
                {
                    b.HasOne("SpotifyMVC.Models.ExternalUrls", "ExternalUrls")
                        .WithMany()
                        .HasForeignKey("ExternalUrlsId");

                    b.Navigation("ExternalUrls");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Artist", b =>
                {
                    b.HasOne("SpotifyMVC.Models.Album", null)
                        .WithMany("Artists")
                        .HasForeignKey("AlbumId");

                    b.HasOne("SpotifyMVC.Models.ExternalUrls", "ExternalUrls")
                        .WithMany()
                        .HasForeignKey("ExternalUrlsId");

                    b.HasOne("SpotifyMVC.Models.Track", null)
                        .WithMany("Artists")
                        .HasForeignKey("TrackId");

                    b.Navigation("ExternalUrls");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Playlist", b =>
                {
                    b.HasOne("SpotifyMVC.Models.ExternalUrls", "ExternalUrls")
                        .WithMany()
                        .HasForeignKey("ExternalUrlsId");

                    b.HasOne("SpotifyMVC.Models.PlaylistOwner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("SpotifyMVC.Models.PlaylistTracks", "Tracks")
                        .WithMany()
                        .HasForeignKey("TracksId");

                    b.HasOne("User", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UserId");

                    b.Navigation("ExternalUrls");

                    b.Navigation("Owner");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SpotifyMVC.Models.PlaylistOwner", b =>
                {
                    b.HasOne("SpotifyMVC.Models.ExternalUrls", "ExternalUrls")
                        .WithMany()
                        .HasForeignKey("ExternalUrlsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalUrls");
                });

            modelBuilder.Entity("SpotifyMVC.Models.PlaylistTrack", b =>
                {
                    b.HasOne("SpotifyMVC.Models.PlaylistTracks", null)
                        .WithMany("Items")
                        .HasForeignKey("PlaylistTracksId");

                    b.HasOne("SpotifyMVC.Models.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SpotifyMVC.Models.SpotifyImage", b =>
                {
                    b.HasOne("SpotifyMVC.Models.Album", null)
                        .WithMany("Images")
                        .HasForeignKey("AlbumId");

                    b.HasOne("SpotifyMVC.Models.Artist", null)
                        .WithMany("Images")
                        .HasForeignKey("ArtistId");

                    b.HasOne("SpotifyMVC.Models.Playlist", null)
                        .WithMany("Images")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Track", b =>
                {
                    b.HasOne("SpotifyMVC.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyMVC.Models.ExternalUrls", "ExternalUrls")
                        .WithMany()
                        .HasForeignKey("ExternalUrlsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("ExternalUrls");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Album", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Artist", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Playlist", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SpotifyMVC.Models.PlaylistTracks", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SpotifyMVC.Models.Track", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
